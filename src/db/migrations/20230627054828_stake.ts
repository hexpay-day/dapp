import type { Knex } from "knex";
import * as config from '../../config'
import { log } from '../../logger'
import * as utils from '../utils'

export async function up(knex: Knex): Promise<void> {
  const exists = await knex.schema.withSchema(config.args.databaseSchema)
    .hasTable(utils.tableNames.STAKE)
  if (!exists) {
    log('creating table %o', utils.tableNames.STAKE)
    await knex.schema.withSchema(config.args.databaseSchema)
      .createTable(utils.tableNames.STAKE, (t) => {
        t.uuid('stakeId').primary() // stake id param + contract id
        t.uuid('contractId')
          .references('contractId')
          .inTable(`${config.args.databaseSchema}.${utils.tableNames.CONTRACT}`)
          .index()
          .notNullable()
          .onDelete('CASCADE')
          .onUpdate('CASCADE')
        t.uuid('stakeStartLogId')
          .references('logId')
          .inTable(`${config.args.databaseSchema}.${utils.tableNames.LOG}`)
          .index()
          .notNullable()
          .onDelete('CASCADE')
          .onUpdate('CASCADE')
        t.uuid('stakeEndLogId')
          .references('logId')
          .inTable(`${config.args.databaseSchema}.${utils.tableNames.LOG}`)
          .index()
          .nullable()
          .onDelete('CASCADE')
          .onUpdate('CASCADE')
        t.bigint('stakeIdParam')
          .index()
          .notNullable()
        t.bigint('stakedHearts')
          .index()
          .notNullable()
        t.bigint('stakeShares')
          .index()
          .notNullable()
        t.bigint('lockedDay')
          .index()
          .notNullable()
        t.bigint('stakedDays')
          .index()
          .notNullable()
        t.bigint('unlockedDay')
          .index()
          .nullable()
        t.bigint('penalty')
          .index()
          .nullable()
        t.bigint('payout')
          .index()
          .nullable()
        t.boolean('isEnded')
          .index()
          .notNullable()
          .defaultTo(false)
        t.boolean('isAutoStake')
          .index()
          .notNullable()
        t.uuid('ownerAddressId')
          .references('addressId')
          .inTable(`${config.args.databaseSchema}.${utils.tableNames.ADDRESS}`)
          .index()
          .notNullable()
          .onDelete('CASCADE')
          .onUpdate('CASCADE')
        t.boolean('isHsi')
          .nullable()
        t.uuid('goodAccountingAddressId')
          .references('addressId')
          .inTable(`${config.args.databaseSchema}.${utils.tableNames.ADDRESS}`)
          .index()
          .nullable()
          .onDelete('CASCADE')
          .onUpdate('CASCADE')
        t.timestamps(true, true)
        t.index([knex.raw('(locked_day + staked_days)')])
      })
    await knex.raw(utils.autoUpdateTimestamp([config.args.databaseSchema, utils.tableNames.STAKE]))
  }
}


export async function down(knex: Knex): Promise<void> {
  await knex.schema.withSchema(config.args.databaseSchema)
    .dropTableIfExists(utils.tableNames.STAKE)
}

